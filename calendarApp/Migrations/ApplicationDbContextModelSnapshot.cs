// <auto-generated />
using System;
using CalendarApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace calendarApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("ApplicationUserCalendar", b =>
                {
                    b.Property<string>("CalendarsCalendarId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UsersUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("CalendarsCalendarId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("ApplicationUserCalendar");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.ApplicationUser", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventId")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("EventId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.Calendar", b =>
                {
                    b.Property<string>("CalendarId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.HasKey("CalendarId");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.Event", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("CalendarId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.UserCalendar", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(1);

                    b.Property<string>("CalendarId")
                        .HasColumnType("TEXT")
                        .HasColumnOrder(2);

                    b.HasKey("UserId", "CalendarId");

                    b.HasIndex("CalendarId");

                    b.ToTable("UserCalendar");
                });

            modelBuilder.Entity("ApplicationUserCalendar", b =>
                {
                    b.HasOne("CalendarApp.Models.DbModels.Calendar", null)
                        .WithMany()
                        .HasForeignKey("CalendarsCalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalendarApp.Models.DbModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.ApplicationUser", b =>
                {
                    b.HasOne("CalendarApp.Models.DbModels.Event", null)
                        .WithMany("Users")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.Event", b =>
                {
                    b.HasOne("CalendarApp.Models.DbModels.Calendar", null)
                        .WithMany("Events")
                        .HasForeignKey("CalendarId");

                    b.HasOne("CalendarApp.Models.DbModels.Location", "Location")
                        .WithOne("Event")
                        .HasForeignKey("CalendarApp.Models.DbModels.Event", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.UserCalendar", b =>
                {
                    b.HasOne("CalendarApp.Models.DbModels.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CalendarApp.Models.DbModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Calendar");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.Calendar", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.Event", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CalendarApp.Models.DbModels.Location", b =>
                {
                    b.Navigation("Event")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
